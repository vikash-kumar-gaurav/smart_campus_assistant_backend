generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                 Int          @id @default(autoincrement())
  name               String
  profile_pic        String?
  email              String       @unique
  password           String
  role               Role
  is_active          Boolean      @default(true)
  semester           Int?
  department         String?      @db.VarChar(20)
  UserMongoId        String
  isPremimum         Boolean      @default(false)
  premimum_expire_at DateTime?
  roll_no            String?
  collegeId          String?
  attendances        attendance[] @relation("studentAttendances")
  attendance         attendance[] @relation("teachertakesattendance")
  pdfs               pdf[]        @relation("posted_by")
  subjects           subject[]    @relation("facultySubjects")
}

model subject {
  id          Int          @id @default(autoincrement())
  code        String       @db.VarChar(30)
  name        String
  semester    Int
  department  String
  facultyId   Int
  attendances attendance[]
  faculty     user         @relation("facultySubjects", fields: [facultyId], references: [id])
}

model attendance {
  id         Int      @id @default(autoincrement())
  studentId  Int
  subjectId  Int
  date       DateTime
  is_present Status
  teacherId  Int
  student    user     @relation("studentAttendances", fields: [studentId], references: [id])
  subject    subject  @relation(fields: [subjectId], references: [id])
  teacher    user     @relation("teachertakesattendance", fields: [teacherId], references: [id])
}

model pdf {
  id           Int         @id @default(autoincrement())
  fileName     String
  category     Category
  year         Int
  Department   Course
  Pyq_category paper_type?
  pdf_Url      String?
  posted_by    Int
  expireAt     DateTime
  createdAt    DateTime    @default(now())
  poster       user        @relation("posted_by", fields: [posted_by], references: [id])
}

model Ebook {
  id                Int       @id @default(autoincrement())
  pdf_name          String
  pdf_url           String?
  ThumbnailId       Int       @unique
  createdAt         DateTime  @default(now())
  pdf_url_createdAt DateTime
  book_name         String
  writer            String
  genre             String
  description       String
  pdf_thumbnail     Thumbnail @relation(fields: [ThumbnailId], references: [id])
}

model Thumbnail {
  id        Int      @id @default(autoincrement())
  image_url String
  public_id String
  createdAt DateTime @default(now())
  ebooks    Ebook?
}

enum Role {
  student
  faculty
  admin
}

enum Status {
  present
  absent
  NA
}

enum Course {
  BCA
  BBA
  MCA
  Mtech
  BSCIT
  PGDM
}

enum Category {
  Pyqs
  Cimage_internal_exams
  Montly_Test
  Notes
}

enum paper_type {
  Honours
  Subsidiary
  Composition
}
